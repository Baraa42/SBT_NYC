{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWorldID",
          "name": "_worldId",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Guild__HasAlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Guild__HasNotCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNullifier",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "GuildCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "oracleContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRewardAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Guild.GuildDetails",
          "name": "_guildDetails",
          "type": "tuple"
        }
      ],
      "name": "createGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guildCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "guildIdToNFTAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "guildToRewardsLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "guilds",
      "outputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "oracleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7b38cd2df32a840ea0c647043a3705b24a90043e171d19390be32b4bf827a44",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "4445840",
    "logsBloom": "0x
    "blockHash": "0x23216f3369a635c2ebc6c3296699a7c7408fb2df1e066fb8b22d30012ec75e19",
    "transactionHash": "0xd7b38cd2df32a840ea0c647043a3705b24a90043e171d19390be32b4bf827a44",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "4445840",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD81dE4BCEf43840a2883e5730d014630eA6b7c4A"
  ],
  "numDeployments": 1,
  "solcInputHash": "64d9e8053013169b285d59173473b217",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWorldID\",\"name\":\"_worldId\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Guild__HasAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guild__HasNotCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNullifier\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GuildCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Guild.GuildDetails\",\"name\":\"_guildDetails\",\"type\":\"tuple\"}],\"name\":\"createGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guildCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guildIdToNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guildToRewardsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guilds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_worldId\":\"The WorldID instance that will verify the proofs\"}}},\"stateVariables\":{\"groupId\":{\"details\":\"The WorldID group ID (1)\"},\"nullifierHashes\":{\"details\":\"Whether a nullifier hash has been used already. Used to prevent double-signaling\"},\"worldId\":{\"details\":\"The WorldID instance that will be used for verifying proofs\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Guild.sol\":\"Guild\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x1f16f9737853b988865ab819d1ebf8b5009defe981c75bc9079e0f40ed2a2e57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Guild.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./Soulbound.sol\\\";\\nimport \\\"./interfaces/ISoulbound.sol\\\";\\nimport \\\"./helpers/ByteHasher.sol\\\";\\nimport \\\"./interfaces/IWorldID.sol\\\";\\n\\nerror Guild__TransferNotAllowed();\\nerror Guild__HasNotCompleted();\\nerror Guild__HasAlreadyClaimed();\\nerror InvalidNullifier();\\n\\ncontract Guild {\\n    using ByteHasher for bytes;\\n    struct GuildDetails {\\n        string description;\\n        string uri;\\n        address oracleContract;\\n        address rewardToken;\\n        uint256 rewardAmount;\\n        uint256 totalRewardAmount;\\n    }\\n\\n    uint256 public guildCounter;\\n    mapping(uint256 => GuildDetails) public guilds;\\n    mapping(uint256 => uint256) public guildToRewardsLeft;\\n    mapping(uint256 => address) public guildIdToNFTAddress;\\n\\n    /// @dev The WorldID instance that will be used for verifying proofs\\n    IWorldID internal immutable worldId;\\n\\n    /// @dev The WorldID group ID (1)\\n    uint256 internal immutable groupId = 1;\\n\\n    /// @dev Whether a nullifier hash has been used already. Used to prevent double-signaling\\n    mapping(uint256 => bool) internal nullifierHashes;\\n\\n    event GuildCreated();\\n\\n    /// @param _worldId The WorldID instance that will verify the proofs\\n    constructor(IWorldID _worldId) {\\n        worldId = _worldId;\\n    }\\n\\n    function createGuild(\\n        string memory _name,\\n        string memory _symbol,\\n        GuildDetails memory _guildDetails\\n    ) external {\\n        guilds[guildCounter++] = _guildDetails;\\n        Soulbound sbt = new Soulbound(_name, _symbol);\\n        guildIdToNFTAddress[guildCounter] = address(sbt);\\n        if (_guildDetails.rewardToken != address(0)) {\\n            IERC20(_guildDetails.rewardToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                _guildDetails.totalRewardAmount\\n            );\\n            guildToRewardsLeft[guildCounter] =\\n                _guildDetails.totalRewardAmount /\\n                _guildDetails.rewardAmount;\\n        }\\n\\n        emit GuildCreated();\\n    }\\n\\n    function mint(address account, uint256 id) public {\\n        IOracle oracle = IOracle(guilds[id].oracleContract);\\n        bool hasCompleted = oracle.hasCompleted(account);\\n\\n        if (!hasCompleted) {\\n            revert Guild__HasNotCompleted();\\n        }\\n\\n        ISoulbound sbt = ISoulbound(guildIdToNFTAddress[id]);\\n        uint256 balance = sbt.balanceOf(account);\\n        if (balance > 0) {\\n            revert Guild__HasAlreadyClaimed();\\n        }\\n\\n        string memory uri = guilds[id].uri;\\n        sbt.safeMint(account, uri);\\n\\n        uint256 rewardsLeft = guildToRewardsLeft[id];\\n\\n        if (rewardsLeft > 0) {\\n            guildToRewardsLeft[id]--;\\n            IERC20(guilds[id].rewardToken).transfer(\\n                account,\\n                guilds[id].rewardAmount\\n            );\\n        }\\n    }\\n\\n    function claim(\\n        address receiver,\\n        uint256 id,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof\\n    ) public {\\n        if (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n        worldId.verifyProof(\\n            root,\\n            id,\\n            abi.encodePacked(receiver).hashToField(),\\n            nullifierHash,\\n            abi.encodePacked(address(this)).hashToField(),\\n            proof\\n        );\\n\\n        nullifierHashes[nullifierHash] = true;\\n        mint(receiver, id);\\n    }\\n}\\n\",\"keccak256\":\"0x62c111dbb4045ea8d5bf8ef5614d906e93202f6e5fa4a6849a8bc16949619b7d\",\"license\":\"MIT\"},\"contracts/Soulbound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nerror Soulbound__TransferNotAllowed();\\n\\ncontract Soulbound is ERC721, ERC721URIStorage, ERC721Burnable, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIdCounter;\\n\\n    constructor(string memory _name, string memory _symbol)\\n        ERC721(_name, _symbol)\\n    {}\\n\\n    function safeMint(address to, string memory uri) public onlyOwner {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n        _setTokenURI(tokenId, uri);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _burn(uint256 tokenId)\\n        internal\\n        override(ERC721, ERC721URIStorage)\\n    {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address, /*to*/\\n        uint256 /*tokenId*/\\n    ) internal override {\\n        if (from != address(0)) {\\n            revert Soulbound__TransferNotAllowed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x684d41a880afb30c450555aef5ba676d84227fb8e294e987b98b2ca5756c4e70\",\"license\":\"MIT\"},\"contracts/helpers/ByteHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary ByteHasher {\\n    /// @dev Creates a keccak256 hash of a bytestring.\\n    /// @param value The bytestring to hash\\n    /// @return The hash of the specified value\\n    /// @dev `>> 8` makes sure that the result is included in our field\\n    function hashToField(bytes memory value) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\\n    }\\n}\\n\",\"keccak256\":\"0x549083f80abbe9178ef5438203614bb7de44bb80dede9efb2e6fea7874a03e36\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Required interface of a compliant oracle contract.\\n */\\ninterface IOracle {\\n    /**\\n     * @dev Returns if `from` has completed the task `guildId`\\n     */\\n    function hasCompleted(address from) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7eccfec5e3ffb09032fec220b69a08c137528f6193166b94e9ad14b998091c1f\",\"license\":\"MIT\"},\"contracts/interfaces/ISoulbound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @dev Required interface of a compliant oracle contract.\\n */\\ninterface ISoulbound is IERC721 {\\n    function safeMint(address to, string memory uri) external;\\n}\\n\",\"keccak256\":\"0x272e6b0dda7f3954b8d9ea7df144b7345673c9a88c992b11d77c04f56525998f\",\"license\":\"MIT\"},\"contracts/interfaces/IWorldID.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IWorldID {\\n    /// @notice Reverts if the zero-knowledge proof is invalid.\\n    /// @param root The of the Merkle tree\\n    /// @param groupId The id of the Semaphore group\\n    /// @param signalHash A keccak256 hash of the Semaphore signal\\n    /// @param nullifierHash The nullifier hash\\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\\n    /// @param proof The zero-knowledge proof\\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\\n    function verifyProof(\\n        uint256 root,\\n        uint256 groupId,\\n        uint256 signalHash,\\n        uint256 nullifierHash,\\n        uint256 externalNullifierHash,\\n        uint256[8] calldata proof\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xe3b4297e3f45787dc73b7d6a83e8d14a74543d48193accc3b7653bcc5594af6d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600160a0908152503480156200001957600080fd5b506040516200511c3803806200511c83398181016040528101906200003f919062000094565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000122565b6000815190506200008e8162000108565b92915050565b600060208284031215620000a757600080fd5b6000620000b7848285016200007d565b91505092915050565b6000620000cd82620000e8565b9050919050565b6000620000e182620000c0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200011381620000d4565b81146200011f57600080fd5b50565b60805160601c60a051614fd46200014860003960005050600061094a0152614fd46000f3fe60806040523480156200001157600080fd5b5060043610620000885760003560e01c8063d83b8d6d1162000063578063d83b8d6d14620000ed578063de395728146200010f578063efe7b7af1462000145578063f27e872c14620001805762000088565b806340c10f19146200008d5780635673c5e414620000ad5780639d66e5ed14620000cd575b600080fd5b620000ab6004803603810190620000a5919062000f22565b620001b6565b005b620000cb6004803603810190620000c5919062001012565b62000617565b005b620000eb6004803603810190620000e5919062000f63565b620008ef565b005b620000f762000a74565b6040516200010691906200137a565b60405180910390f35b6200012d6004803603810190620001279190620010b3565b62000a7a565b6040516200013c919062001209565b60405180910390f35b6200016360048036038101906200015d9190620010b3565b62000aad565b6040516200017796959493929190620012ff565b60405180910390f35b6200019e6004803603810190620001989190620010b3565b62000c49565b604051620001ad91906200137a565b60405180910390f35b60006001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166331f29250856040518263ffffffff1660e01b81526004016200022e919062001209565b60206040518083038186803b1580156200024757600080fd5b505afa1580156200025c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000282919062000fe6565b905080620002bc576040517f6d30234000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b815260040162000331919062001209565b60206040518083038186803b1580156200034a57600080fd5b505afa1580156200035f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003859190620010df565b90506000811115620003c3576040517f8528b07200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008781526020019081526020016000206001018054620003e8906200158c565b80601f016020809104026020016040519081016040528092919081815260200182805462000416906200158c565b8015620004675780601f106200043b5761010080835404028352916020019162000467565b820191906000526020600020905b8154815290600101906020018083116200044957829003601f168201915b505050505090508273ffffffffffffffffffffffffffffffffffffffff1663d204c45e88836040518363ffffffff1660e01b8152600401620004ab92919062001263565b600060405180830381600087803b158015620004c657600080fd5b505af1158015620004db573d6000803e3d6000fd5b5050505060006002600088815260200190815260200160002054905060008111156200060d5760026000888152602001908152602001600020600081548092919062000527906200155d565b91905055506001600088815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89600160008b8152602001908152602001600020600401546040518363ffffffff1660e01b8152600401620005b592919062001297565b602060405180830381600087803b158015620005d057600080fd5b505af1158015620005e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200060b919062000fe6565b505b5050505050505050565b80600160008060008154809291906200063090620015f8565b91905055815260200190815260200160002060008201518160000190805190602001906200066092919062000c9a565b5060208201518160010190805190602001906200067f92919062000c9a565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015590505060008383604051620007379062000d2b565b62000744929190620012c4565b604051809103906000f08015801562000761573d6000803e3d6000fd5b50905080600360008054815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff16826060015173ffffffffffffffffffffffffffffffffffffffff1614620008bd57816060015173ffffffffffffffffffffffffffffffffffffffff166323b872dd33308560a001516040518463ffffffff1660e01b8152600401620008379392919062001226565b602060405180830381600087803b1580156200085257600080fd5b505af115801562000867573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200088d919062000fe6565b5081608001518260a00151620008a4919062001496565b6002600080548152602001908152602001600020819055505b7f29dbb2ec1eac6ed114d5a699685ffe6c3bd2dae3f686b77f1dbf0145255bdeaa60405160405180910390a150505050565b6004600083815260200190815260200160002060009054906101000a900460ff161562000948576040517f5d904cb200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e38486620009b2896040516020016200099d9190620011d3565b60405160208183030381529060405262000c61565b86620009df30604051602001620009ca9190620011d3565b60405160208183030381529060405262000c61565b876040518763ffffffff1660e01b815260040162000a039695949392919062001397565b60006040518083038186803b15801562000a1c57600080fd5b505afa15801562000a31573d6000803e3d6000fd5b5050505060016004600084815260200190815260200160002060006101000a81548160ff02191690831515021790555062000a6d8585620001b6565b5050505050565b60005481565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160205280600052604060002060009150905080600001805462000ad2906200158c565b80601f016020809104026020016040519081016040528092919081815260200182805462000b00906200158c565b801562000b515780601f1062000b255761010080835404028352916020019162000b51565b820191906000526020600020905b81548152906001019060200180831162000b3357829003601f168201915b50505050509080600101805462000b68906200158c565b80601f016020809104026020016040519081016040528092919081815260200182805462000b96906200158c565b801562000be75780601f1062000bbb5761010080835404028352916020019162000be7565b820191906000526020600020905b81548152906001019060200180831162000bc957829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050154905086565b60026020528060005260406000206000915090505481565b600060088260405160200162000c789190620011f0565b6040516020818303038152906040528051906020012060001c901c9050919050565b82805462000ca8906200158c565b90600052602060002090601f01602090048101928262000ccc576000855562000d18565b82601f1062000ce757805160ff191683800117855562000d18565b8280016001018555821562000d18579182015b8281111562000d1757825182559160200191906001019062000cfa565b5b50905062000d27919062000d39565b5090565b613808806200179783390190565b5b8082111562000d5457600081600090555060010162000d3a565b5090565b600062000d6f62000d69846200142e565b62001405565b90508281526020810184848401111562000d8857600080fd5b62000d9584828562001518565b509392505050565b60008135905062000dae8162001748565b92915050565b60008190508260206008028201111562000dcd57600080fd5b92915050565b60008151905062000de48162001762565b92915050565b600082601f83011262000dfc57600080fd5b813562000e0e84826020860162000d58565b91505092915050565b600060c0828403121562000e2a57600080fd5b62000e3660c062001405565b9050600082013567ffffffffffffffff81111562000e5357600080fd5b62000e618482850162000dea565b600083015250602082013567ffffffffffffffff81111562000e8257600080fd5b62000e908482850162000dea565b602083015250604062000ea68482850162000d9d565b604083015250606062000ebc8482850162000d9d565b606083015250608062000ed28482850162000ef4565b60808301525060a062000ee88482850162000ef4565b60a08301525092915050565b60008135905062000f05816200177c565b92915050565b60008151905062000f1c816200177c565b92915050565b6000806040838503121562000f3657600080fd5b600062000f468582860162000d9d565b925050602062000f598582860162000ef4565b9150509250929050565b6000806000806000610180868803121562000f7d57600080fd5b600062000f8d8882890162000d9d565b955050602062000fa08882890162000ef4565b945050604062000fb38882890162000ef4565b935050606062000fc68882890162000ef4565b925050608062000fd98882890162000db4565b9150509295509295909350565b60006020828403121562000ff957600080fd5b6000620010098482850162000dd3565b91505092915050565b6000806000606084860312156200102857600080fd5b600084013567ffffffffffffffff8111156200104357600080fd5b620010518682870162000dea565b935050602084013567ffffffffffffffff8111156200106f57600080fd5b6200107d8682870162000dea565b925050604084013567ffffffffffffffff8111156200109b57600080fd5b620010a98682870162000e17565b9150509250925092565b600060208284031215620010c657600080fd5b6000620010d68482850162000ef4565b91505092915050565b600060208284031215620010f257600080fd5b6000620011028482850162000f0b565b91505092915050565b6200111681620014ce565b82525050565b620011316200112b82620014ce565b62001646565b82525050565b62001146610100838362001518565b5050565b6000620011578262001464565b6200116381856200147a565b93506200117581856020860162001527565b80840191505092915050565b60006200118e826200146f565b6200119a818562001485565b9350620011ac81856020860162001527565b620011b7816200172a565b840191505092915050565b620011cd816200150e565b82525050565b6000620011e182846200111c565b60148201915081905092915050565b6000620011fe82846200114a565b915081905092915050565b60006020820190506200122060008301846200110b565b92915050565b60006060820190506200123d60008301866200110b565b6200124c60208301856200110b565b6200125b6040830184620011c2565b949350505050565b60006040820190506200127a60008301856200110b565b81810360208301526200128e818462001181565b90509392505050565b6000604082019050620012ae60008301856200110b565b620012bd6020830184620011c2565b9392505050565b60006040820190508181036000830152620012e0818562001181565b90508181036020830152620012f6818462001181565b90509392505050565b600060c08201905081810360008301526200131b818962001181565b9050818103602083015262001331818862001181565b90506200134260408301876200110b565b6200135160608301866200110b565b620013606080830185620011c2565b6200136f60a0830184620011c2565b979650505050505050565b6000602082019050620013916000830184620011c2565b92915050565b60006101a082019050620013af6000830189620011c2565b620013be6020830188620011c2565b620013cd6040830187620011c2565b620013dc6060830186620011c2565b620013eb6080830185620011c2565b620013fa60a083018462001137565b979650505050505050565b60006200141162001424565b90506200141f8282620015c2565b919050565b6000604051905090565b600067ffffffffffffffff8211156200144c576200144b620016fb565b5b62001457826200172a565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000620014a3826200150e565b9150620014b0836200150e565b925082620014c357620014c26200169d565b5b828204905092915050565b6000620014db82620014ee565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015620015475780820151818401526020810190506200152a565b8381111562001557576000848401525b50505050565b60006200156a826200150e565b915060008214156200158157620015806200166e565b5b600182039050919050565b60006002820490506001821680620015a557607f821691505b60208210811415620015bc57620015bb620016cc565b5b50919050565b620015cd826200172a565b810181811067ffffffffffffffff82111715620015ef57620015ee620016fb565b5b80604052505050565b600062001605826200150e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200163b576200163a6200166e565b5b600182019050919050565b600062001653826200165a565b9050919050565b600062001667826200173b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b6200175381620014ce565b81146200175f57600080fd5b50565b6200176d81620014e2565b81146200177957600080fd5b50565b62001787816200150e565b81146200179357600080fd5b5056fe60806040523480156200001157600080fd5b506040516200380838038062003808833981810160405281019062000037919062000285565b818181600090805190602001906200005192919062000163565b5080600190805190602001906200006a92919062000163565b5050506200008d620000816200009560201b60201c565b6200009d60201b60201c565b505062000468565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805462000171906200038d565b90600052602060002090601f016020900481019282620001955760008555620001e1565b82601f10620001b057805160ff1916838001178555620001e1565b82800160010185558215620001e1579182015b82811115620001e0578251825591602001919060010190620001c3565b5b509050620001f09190620001f4565b5090565b5b808211156200020f576000816000905550600101620001f5565b5090565b60006200022a620002248462000321565b620002f8565b9050828152602081018484840111156200024357600080fd5b6200025084828562000357565b509392505050565b600082601f8301126200026a57600080fd5b81516200027c84826020860162000213565b91505092915050565b600080604083850312156200029957600080fd5b600083015167ffffffffffffffff811115620002b457600080fd5b620002c28582860162000258565b925050602083015167ffffffffffffffff811115620002e057600080fd5b620002ee8582860162000258565b9150509250929050565b60006200030462000317565b9050620003128282620003c3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200033f576200033e62000428565b5b6200034a8262000457565b9050602081019050919050565b60005b83811015620003775780820151818401526020810190506200035a565b8381111562000387576000848401525b50505050565b60006002820490506001821680620003a657607f821691505b60208210811415620003bd57620003bc620003f9565b5b50919050565b620003ce8262000457565b810181811067ffffffffffffffff82111715620003f057620003ef62000428565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61339080620004786000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a2578063b88d4fde11610071578063b88d4fde146102cb578063c87b56dd146102e7578063d204c45e14610317578063e985e9c514610333578063f2fde38b1461036357610116565b8063715018a6146102695780638da5cb5b1461027357806395d89b4114610291578063a22cb465146102af57610116565b806323b872dd116100e957806323b872dd146101b557806342842e0e146101d157806342966c68146101ed5780636352211e1461020957806370a082311461023957610116565b806301ffc9a71461011b57806306fdde031461014b578063081812fc14610169578063095ea7b314610199575b600080fd5b610135600480360381019061013091906122ad565b61037f565b604051610142919061271c565b60405180910390f35b610153610461565b6040516101609190612737565b60405180910390f35b610183600480360381019061017e91906122ff565b6104f3565b60405161019091906126b5565b60405180910390f35b6101b360048036038101906101ae9190612271565b610578565b005b6101cf60048036038101906101ca9190612117565b610690565b005b6101eb60048036038101906101e69190612117565b6106f0565b005b610207600480360381019061020291906122ff565b610710565b005b610223600480360381019061021e91906122ff565b61076c565b60405161023091906126b5565b60405180910390f35b610253600480360381019061024e91906120b2565b61081e565b60405161026091906129b9565b60405180910390f35b6102716108d6565b005b61027b61095e565b60405161028891906126b5565b60405180910390f35b610299610988565b6040516102a69190612737565b60405180910390f35b6102c960048036038101906102c491906121e1565b610a1a565b005b6102e560048036038101906102e09190612166565b610a30565b005b61030160048036038101906102fc91906122ff565b610a92565b60405161030e9190612737565b60405180910390f35b610331600480360381019061032c919061221d565b610aa4565b005b61034d600480360381019061034891906120db565b610b51565b60405161035a919061271c565b60405180910390f35b61037d600480360381019061037891906120b2565b610be5565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061044a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061045a575061045982610cdd565b5b9050919050565b60606000805461047090612c0f565b80601f016020809104026020016040519081016040528092919081815260200182805461049c90612c0f565b80156104e95780601f106104be576101008083540402835291602001916104e9565b820191906000526020600020905b8154815290600101906020018083116104cc57829003601f168201915b5050505050905090565b60006104fe82610d47565b61053d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610534906128f9565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105838261076c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105eb90612959565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610613610db3565b73ffffffffffffffffffffffffffffffffffffffff16148061064257506106418161063c610db3565b610b51565b5b610681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067890612839565b60405180910390fd5b61068b8383610dbb565b505050565b6106a161069b610db3565b82610e74565b6106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790612979565b60405180910390fd5b6106eb838383610f52565b505050565b61070b83838360405180602001604052806000815250610a30565b505050565b61072161071b610db3565b82610e74565b610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075790612999565b60405180910390fd5b610769816111b9565b50565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080c90612879565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088690612859565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108de610db3565b73ffffffffffffffffffffffffffffffffffffffff166108fc61095e565b73ffffffffffffffffffffffffffffffffffffffff1614610952576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094990612919565b60405180910390fd5b61095c60006111c5565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461099790612c0f565b80601f01602080910402602001604051908101604052809291908181526020018280546109c390612c0f565b8015610a105780601f106109e557610100808354040283529160200191610a10565b820191906000526020600020905b8154815290600101906020018083116109f357829003601f168201915b5050505050905090565b610a2c610a25610db3565b838361128b565b5050565b610a41610a3b610db3565b83610e74565b610a80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7790612979565b60405180910390fd5b610a8c848484846113f8565b50505050565b6060610a9d82611454565b9050919050565b610aac610db3565b73ffffffffffffffffffffffffffffffffffffffff16610aca61095e565b73ffffffffffffffffffffffffffffffffffffffff1614610b20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1790612919565b60405180910390fd5b6000610b2c60086115a6565b9050610b3860086115b4565b610b4283826115ca565b610b4c81836115e8565b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610bed610db3565b73ffffffffffffffffffffffffffffffffffffffff16610c0b61095e565b73ffffffffffffffffffffffffffffffffffffffff1614610c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5890612919565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc890612779565b60405180910390fd5b610cda816111c5565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610e2e8361076c565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610e7f82610d47565b610ebe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb590612819565b60405180910390fd5b6000610ec98361076c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610f0b5750610f0a8185610b51565b5b80610f4957508373ffffffffffffffffffffffffffffffffffffffff16610f31846104f3565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610f728261076c565b73ffffffffffffffffffffffffffffffffffffffff1614610fc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbf90612799565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102f906127d9565b60405180910390fd5b61104383838361165c565b61104e600082610dbb565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461109e9190612b25565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110f59190612a9e565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111b48383836116c7565b505050565b6111c2816116cc565b50565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156112fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f1906127f9565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113eb919061271c565b60405180910390a3505050565b611403848484610f52565b61140f8484848461171f565b61144e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144590612759565b60405180910390fd5b50505050565b606061145f82610d47565b61149e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611495906128d9565b60405180910390fd5b60006006600084815260200190815260200160002080546114be90612c0f565b80601f01602080910402602001604051908101604052809291908181526020018280546114ea90612c0f565b80156115375780601f1061150c57610100808354040283529160200191611537565b820191906000526020600020905b81548152906001019060200180831161151a57829003601f168201915b5050505050905060006115486118b6565b905060008151141561155e5781925050506115a1565b60008251111561159357808260405160200161157b929190612691565b604051602081830303815290604052925050506115a1565b61159c846118cd565b925050505b919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6115e4828260405180602001604052806000815250611974565b5050565b6115f182610d47565b611630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162790612899565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611657929190611e96565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146116c2576040517f5db570fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b505050565b6116d5816119cf565b60006006600083815260200190815260200160002080546116f590612c0f565b90501461171c5760066000828152602001908152602001600020600061171b9190611f1c565b5b50565b60006117408473ffffffffffffffffffffffffffffffffffffffff16611aec565b156118a9578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611769610db3565b8786866040518563ffffffff1660e01b815260040161178b94939291906126d0565b602060405180830381600087803b1580156117a557600080fd5b505af19250505080156117d657506040513d601f19601f820116820180604052508101906117d391906122d6565b60015b611859573d8060008114611806576040519150601f19603f3d011682016040523d82523d6000602084013e61180b565b606091505b50600081511415611851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184890612759565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506118ae565b600190505b949350505050565b606060405180602001604052806000815250905090565b60606118d882610d47565b611917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190e90612939565b60405180910390fd5b60006119216118b6565b90506000815111611941576040518060200160405280600081525061196c565b8061194b84611b0f565b60405160200161195c929190612691565b6040516020818303038152906040525b915050919050565b61197e8383611cbc565b61198b600084848461171f565b6119ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c190612759565b60405180910390fd5b505050565b60006119da8261076c565b90506119e88160008461165c565b6119f3600083610dbb565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a439190612b25565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ae8816000846116c7565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000821415611b57576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611cb7565b600082905060005b60008214611b89578080611b7290612c72565b915050600a82611b829190612af4565b9150611b5f565b60008167ffffffffffffffff811115611bcb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611bfd5781602001600182028036833780820191505090505b5090505b60008514611cb057600182611c169190612b25565b9150600a85611c259190612cbb565b6030611c319190612a9e565b60f81b818381518110611c6d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611ca99190612af4565b9450611c01565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d23906128b9565b60405180910390fd5b611d3581610d47565b15611d75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6c906127b9565b60405180910390fd5b611d816000838361165c565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611dd19190612a9e565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611e92600083836116c7565b5050565b828054611ea290612c0f565b90600052602060002090601f016020900481019282611ec45760008555611f0b565b82601f10611edd57805160ff1916838001178555611f0b565b82800160010185558215611f0b579182015b82811115611f0a578251825591602001919060010190611eef565b5b509050611f189190611f5c565b5090565b508054611f2890612c0f565b6000825580601f10611f3a5750611f59565b601f016020900490600052602060002090810190611f589190611f5c565b5b50565b5b80821115611f75576000816000905550600101611f5d565b5090565b6000611f8c611f87846129f9565b6129d4565b905082815260208101848484011115611fa457600080fd5b611faf848285612bcd565b509392505050565b6000611fca611fc584612a2a565b6129d4565b905082815260208101848484011115611fe257600080fd5b611fed848285612bcd565b509392505050565b600081359050612004816132fe565b92915050565b60008135905061201981613315565b92915050565b60008135905061202e8161332c565b92915050565b6000815190506120438161332c565b92915050565b600082601f83011261205a57600080fd5b813561206a848260208601611f79565b91505092915050565b600082601f83011261208457600080fd5b8135612094848260208601611fb7565b91505092915050565b6000813590506120ac81613343565b92915050565b6000602082840312156120c457600080fd5b60006120d284828501611ff5565b91505092915050565b600080604083850312156120ee57600080fd5b60006120fc85828601611ff5565b925050602061210d85828601611ff5565b9150509250929050565b60008060006060848603121561212c57600080fd5b600061213a86828701611ff5565b935050602061214b86828701611ff5565b925050604061215c8682870161209d565b9150509250925092565b6000806000806080858703121561217c57600080fd5b600061218a87828801611ff5565b945050602061219b87828801611ff5565b93505060406121ac8782880161209d565b925050606085013567ffffffffffffffff8111156121c957600080fd5b6121d587828801612049565b91505092959194509250565b600080604083850312156121f457600080fd5b600061220285828601611ff5565b92505060206122138582860161200a565b9150509250929050565b6000806040838503121561223057600080fd5b600061223e85828601611ff5565b925050602083013567ffffffffffffffff81111561225b57600080fd5b61226785828601612073565b9150509250929050565b6000806040838503121561228457600080fd5b600061229285828601611ff5565b92505060206122a38582860161209d565b9150509250929050565b6000602082840312156122bf57600080fd5b60006122cd8482850161201f565b91505092915050565b6000602082840312156122e857600080fd5b60006122f684828501612034565b91505092915050565b60006020828403121561231157600080fd5b600061231f8482850161209d565b91505092915050565b61233181612b59565b82525050565b61234081612b6b565b82525050565b600061235182612a5b565b61235b8185612a71565b935061236b818560208601612bdc565b61237481612da8565b840191505092915050565b600061238a82612a66565b6123948185612a82565b93506123a4818560208601612bdc565b6123ad81612da8565b840191505092915050565b60006123c382612a66565b6123cd8185612a93565b93506123dd818560208601612bdc565b80840191505092915050565b60006123f6603283612a82565b915061240182612db9565b604082019050919050565b6000612419602683612a82565b915061242482612e08565b604082019050919050565b600061243c602583612a82565b915061244782612e57565b604082019050919050565b600061245f601c83612a82565b915061246a82612ea6565b602082019050919050565b6000612482602483612a82565b915061248d82612ecf565b604082019050919050565b60006124a5601983612a82565b91506124b082612f1e565b602082019050919050565b60006124c8602c83612a82565b91506124d382612f47565b604082019050919050565b60006124eb603883612a82565b91506124f682612f96565b604082019050919050565b600061250e602a83612a82565b915061251982612fe5565b604082019050919050565b6000612531602983612a82565b915061253c82613034565b604082019050919050565b6000612554602e83612a82565b915061255f82613083565b604082019050919050565b6000612577602083612a82565b9150612582826130d2565b602082019050919050565b600061259a603183612a82565b91506125a5826130fb565b604082019050919050565b60006125bd602c83612a82565b91506125c88261314a565b604082019050919050565b60006125e0602083612a82565b91506125eb82613199565b602082019050919050565b6000612603602f83612a82565b915061260e826131c2565b604082019050919050565b6000612626602183612a82565b915061263182613211565b604082019050919050565b6000612649603183612a82565b915061265482613260565b604082019050919050565b600061266c603083612a82565b9150612677826132af565b604082019050919050565b61268b81612bc3565b82525050565b600061269d82856123b8565b91506126a982846123b8565b91508190509392505050565b60006020820190506126ca6000830184612328565b92915050565b60006080820190506126e56000830187612328565b6126f26020830186612328565b6126ff6040830185612682565b81810360608301526127118184612346565b905095945050505050565b60006020820190506127316000830184612337565b92915050565b60006020820190508181036000830152612751818461237f565b905092915050565b60006020820190508181036000830152612772816123e9565b9050919050565b600060208201905081810360008301526127928161240c565b9050919050565b600060208201905081810360008301526127b28161242f565b9050919050565b600060208201905081810360008301526127d281612452565b9050919050565b600060208201905081810360008301526127f281612475565b9050919050565b6000602082019050818103600083015261281281612498565b9050919050565b60006020820190508181036000830152612832816124bb565b9050919050565b60006020820190508181036000830152612852816124de565b9050919050565b6000602082019050818103600083015261287281612501565b9050919050565b6000602082019050818103600083015261289281612524565b9050919050565b600060208201905081810360008301526128b281612547565b9050919050565b600060208201905081810360008301526128d28161256a565b9050919050565b600060208201905081810360008301526128f28161258d565b9050919050565b60006020820190508181036000830152612912816125b0565b9050919050565b60006020820190508181036000830152612932816125d3565b9050919050565b60006020820190508181036000830152612952816125f6565b9050919050565b6000602082019050818103600083015261297281612619565b9050919050565b600060208201905081810360008301526129928161263c565b9050919050565b600060208201905081810360008301526129b28161265f565b9050919050565b60006020820190506129ce6000830184612682565b92915050565b60006129de6129ef565b90506129ea8282612c41565b919050565b6000604051905090565b600067ffffffffffffffff821115612a1457612a13612d79565b5b612a1d82612da8565b9050602081019050919050565b600067ffffffffffffffff821115612a4557612a44612d79565b5b612a4e82612da8565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612aa982612bc3565b9150612ab483612bc3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612ae957612ae8612cec565b5b828201905092915050565b6000612aff82612bc3565b9150612b0a83612bc3565b925082612b1a57612b19612d1b565b5b828204905092915050565b6000612b3082612bc3565b9150612b3b83612bc3565b925082821015612b4e57612b4d612cec565b5b828203905092915050565b6000612b6482612ba3565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612bfa578082015181840152602081019050612bdf565b83811115612c09576000848401525b50505050565b60006002820490506001821680612c2757607f821691505b60208210811415612c3b57612c3a612d4a565b5b50919050565b612c4a82612da8565b810181811067ffffffffffffffff82111715612c6957612c68612d79565b5b80604052505050565b6000612c7d82612bc3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612cb057612caf612cec565b5b600182019050919050565b6000612cc682612bc3565b9150612cd183612bc3565b925082612ce157612ce0612d1b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000602082015250565b61330781612b59565b811461331257600080fd5b50565b61331e81612b6b565b811461332957600080fd5b50565b61333581612b77565b811461334057600080fd5b50565b61334c81612bc3565b811461335757600080fd5b5056fea2646970667358221220b7f14a0548cd100c5b1b7e7fcab5969012c96a9eca730bb33c5eb45873a6e8e664736f6c63430008040033a2646970667358221220b29b441e96ee5e5f86c27f1ed035c96ce6c354ee0eb679c1ef45e10e5ff9a95464736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000885760003560e01c8063d83b8d6d1162000063578063d83b8d6d14620000ed578063de395728146200010f578063efe7b7af1462000145578063f27e872c14620001805762000088565b806340c10f19146200008d5780635673c5e414620000ad5780639d66e5ed14620000cd575b600080fd5b620000ab6004803603810190620000a5919062000f22565b620001b6565b005b620000cb6004803603810190620000c5919062001012565b62000617565b005b620000eb6004803603810190620000e5919062000f63565b620008ef565b005b620000f762000a74565b6040516200010691906200137a565b60405180910390f35b6200012d6004803603810190620001279190620010b3565b62000a7a565b6040516200013c919062001209565b60405180910390f35b6200016360048036038101906200015d9190620010b3565b62000aad565b6040516200017796959493929190620012ff565b60405180910390f35b6200019e6004803603810190620001989190620010b3565b62000c49565b604051620001ad91906200137a565b60405180910390f35b60006001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166331f29250856040518263ffffffff1660e01b81526004016200022e919062001209565b60206040518083038186803b1580156200024757600080fd5b505afa1580156200025c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000282919062000fe6565b905080620002bc576040517f6d30234000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b815260040162000331919062001209565b60206040518083038186803b1580156200034a57600080fd5b505afa1580156200035f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003859190620010df565b90506000811115620003c3576040517f8528b07200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008781526020019081526020016000206001018054620003e8906200158c565b80601f016020809104026020016040519081016040528092919081815260200182805462000416906200158c565b8015620004675780601f106200043b5761010080835404028352916020019162000467565b820191906000526020600020905b8154815290600101906020018083116200044957829003601f168201915b505050505090508273ffffffffffffffffffffffffffffffffffffffff1663d204c45e88836040518363ffffffff1660e01b8152600401620004ab92919062001263565b600060405180830381600087803b158015620004c657600080fd5b505af1158015620004db573d6000803e3d6000fd5b5050505060006002600088815260200190815260200160002054905060008111156200060d5760026000888152602001908152602001600020600081548092919062000527906200155d565b91905055506001600088815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89600160008b8152602001908152602001600020600401546040518363ffffffff1660e01b8152600401620005b592919062001297565b602060405180830381600087803b158015620005d057600080fd5b505af1158015620005e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200060b919062000fe6565b505b5050505050505050565b80600160008060008154809291906200063090620015f8565b91905055815260200190815260200160002060008201518160000190805190602001906200066092919062000c9a565b5060208201518160010190805190602001906200067f92919062000c9a565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015590505060008383604051620007379062000d2b565b62000744929190620012c4565b604051809103906000f08015801562000761573d6000803e3d6000fd5b50905080600360008054815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff16826060015173ffffffffffffffffffffffffffffffffffffffff1614620008bd57816060015173ffffffffffffffffffffffffffffffffffffffff166323b872dd33308560a001516040518463ffffffff1660e01b8152600401620008379392919062001226565b602060405180830381600087803b1580156200085257600080fd5b505af115801562000867573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200088d919062000fe6565b5081608001518260a00151620008a4919062001496565b6002600080548152602001908152602001600020819055505b7f29dbb2ec1eac6ed114d5a699685ffe6c3bd2dae3f686b77f1dbf0145255bdeaa60405160405180910390a150505050565b6004600083815260200190815260200160002060009054906101000a900460ff161562000948576040517f5d904cb200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e38486620009b2896040516020016200099d9190620011d3565b60405160208183030381529060405262000c61565b86620009df30604051602001620009ca9190620011d3565b60405160208183030381529060405262000c61565b876040518763ffffffff1660e01b815260040162000a039695949392919062001397565b60006040518083038186803b15801562000a1c57600080fd5b505afa15801562000a31573d6000803e3d6000fd5b5050505060016004600084815260200190815260200160002060006101000a81548160ff02191690831515021790555062000a6d8585620001b6565b5050505050565b60005481565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160205280600052604060002060009150905080600001805462000ad2906200158c565b80601f016020809104026020016040519081016040528092919081815260200182805462000b00906200158c565b801562000b515780601f1062000b255761010080835404028352916020019162000b51565b820191906000526020600020905b81548152906001019060200180831162000b3357829003601f168201915b50505050509080600101805462000b68906200158c565b80601f016020809104026020016040519081016040528092919081815260200182805462000b96906200158c565b801562000be75780601f1062000bbb5761010080835404028352916020019162000be7565b820191906000526020600020905b81548152906001019060200180831162000bc957829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050154905086565b60026020528060005260406000206000915090505481565b600060088260405160200162000c789190620011f0565b6040516020818303038152906040528051906020012060001c901c9050919050565b82805462000ca8906200158c565b90600052602060002090601f01602090048101928262000ccc576000855562000d18565b82601f1062000ce757805160ff191683800117855562000d18565b8280016001018555821562000d18579182015b8281111562000d1757825182559160200191906001019062000cfa565b5b50905062000d27919062000d39565b5090565b613808806200179783390190565b5b8082111562000d5457600081600090555060010162000d3a565b5090565b600062000d6f62000d69846200142e565b62001405565b90508281526020810184848401111562000d8857600080fd5b62000d9584828562001518565b509392505050565b60008135905062000dae8162001748565b92915050565b60008190508260206008028201111562000dcd57600080fd5b92915050565b60008151905062000de48162001762565b92915050565b600082601f83011262000dfc57600080fd5b813562000e0e84826020860162000d58565b91505092915050565b600060c0828403121562000e2a57600080fd5b62000e3660c062001405565b9050600082013567ffffffffffffffff81111562000e5357600080fd5b62000e618482850162000dea565b600083015250602082013567ffffffffffffffff81111562000e8257600080fd5b62000e908482850162000dea565b602083015250604062000ea68482850162000d9d565b604083015250606062000ebc8482850162000d9d565b606083015250608062000ed28482850162000ef4565b60808301525060a062000ee88482850162000ef4565b60a08301525092915050565b60008135905062000f05816200177c565b92915050565b60008151905062000f1c816200177c565b92915050565b6000806040838503121562000f3657600080fd5b600062000f468582860162000d9d565b925050602062000f598582860162000ef4565b9150509250929050565b6000806000806000610180868803121562000f7d57600080fd5b600062000f8d8882890162000d9d565b955050602062000fa08882890162000ef4565b945050604062000fb38882890162000ef4565b935050606062000fc68882890162000ef4565b925050608062000fd98882890162000db4565b9150509295509295909350565b60006020828403121562000ff957600080fd5b6000620010098482850162000dd3565b91505092915050565b6000806000606084860312156200102857600080fd5b600084013567ffffffffffffffff8111156200104357600080fd5b620010518682870162000dea565b935050602084013567ffffffffffffffff8111156200106f57600080fd5b6200107d8682870162000dea565b925050604084013567ffffffffffffffff8111156200109b57600080fd5b620010a98682870162000e17565b9150509250925092565b600060208284031215620010c657600080fd5b6000620010d68482850162000ef4565b91505092915050565b600060208284031215620010f257600080fd5b6000620011028482850162000f0b565b91505092915050565b6200111681620014ce565b82525050565b620011316200112b82620014ce565b62001646565b82525050565b62001146610100838362001518565b5050565b6000620011578262001464565b6200116381856200147a565b93506200117581856020860162001527565b80840191505092915050565b60006200118e826200146f565b6200119a818562001485565b9350620011ac81856020860162001527565b620011b7816200172a565b840191505092915050565b620011cd816200150e565b82525050565b6000620011e182846200111c565b60148201915081905092915050565b6000620011fe82846200114a565b915081905092915050565b60006020820190506200122060008301846200110b565b92915050565b60006060820190506200123d60008301866200110b565b6200124c60208301856200110b565b6200125b6040830184620011c2565b949350505050565b60006040820190506200127a60008301856200110b565b81810360208301526200128e818462001181565b90509392505050565b6000604082019050620012ae60008301856200110b565b620012bd6020830184620011c2565b9392505050565b60006040820190508181036000830152620012e0818562001181565b90508181036020830152620012f6818462001181565b90509392505050565b600060c08201905081810360008301526200131b818962001181565b9050818103602083015262001331818862001181565b90506200134260408301876200110b565b6200135160608301866200110b565b620013606080830185620011c2565b6200136f60a0830184620011c2565b979650505050505050565b6000602082019050620013916000830184620011c2565b92915050565b60006101a082019050620013af6000830189620011c2565b620013be6020830188620011c2565b620013cd6040830187620011c2565b620013dc6060830186620011c2565b620013eb6080830185620011c2565b620013fa60a083018462001137565b979650505050505050565b60006200141162001424565b90506200141f8282620015c2565b919050565b6000604051905090565b600067ffffffffffffffff8211156200144c576200144b620016fb565b5b62001457826200172a565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000620014a3826200150e565b9150620014b0836200150e565b925082620014c357620014c26200169d565b5b828204905092915050565b6000620014db82620014ee565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015620015475780820151818401526020810190506200152a565b8381111562001557576000848401525b50505050565b60006200156a826200150e565b915060008214156200158157620015806200166e565b5b600182039050919050565b60006002820490506001821680620015a557607f821691505b60208210811415620015bc57620015bb620016cc565b5b50919050565b620015cd826200172a565b810181811067ffffffffffffffff82111715620015ef57620015ee620016fb565b5b80604052505050565b600062001605826200150e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200163b576200163a6200166e565b5b600182019050919050565b600062001653826200165a565b9050919050565b600062001667826200173b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b6200175381620014ce565b81146200175f57600080fd5b50565b6200176d81620014e2565b81146200177957600080fd5b50565b62001787816200150e565b81146200179357600080fd5b5056fe60806040523480156200001157600080fd5b506040516200380838038062003808833981810160405281019062000037919062000285565b818181600090805190602001906200005192919062000163565b5080600190805190602001906200006a92919062000163565b5050506200008d620000816200009560201b60201c565b6200009d60201b60201c565b505062000468565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805462000171906200038d565b90600052602060002090601f016020900481019282620001955760008555620001e1565b82601f10620001b057805160ff1916838001178555620001e1565b82800160010185558215620001e1579182015b82811115620001e0578251825591602001919060010190620001c3565b5b509050620001f09190620001f4565b5090565b5b808211156200020f576000816000905550600101620001f5565b5090565b60006200022a620002248462000321565b620002f8565b9050828152602081018484840111156200024357600080fd5b6200025084828562000357565b509392505050565b600082601f8301126200026a57600080fd5b81516200027c84826020860162000213565b91505092915050565b600080604083850312156200029957600080fd5b600083015167ffffffffffffffff811115620002b457600080fd5b620002c28582860162000258565b925050602083015167ffffffffffffffff811115620002e057600080fd5b620002ee8582860162000258565b9150509250929050565b60006200030462000317565b9050620003128282620003c3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200033f576200033e62000428565b5b6200034a8262000457565b9050602081019050919050565b60005b83811015620003775780820151818401526020810190506200035a565b8381111562000387576000848401525b50505050565b60006002820490506001821680620003a657607f821691505b60208210811415620003bd57620003bc620003f9565b5b50919050565b620003ce8262000457565b810181811067ffffffffffffffff82111715620003f057620003ef62000428565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61339080620004786000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a2578063b88d4fde11610071578063b88d4fde146102cb578063c87b56dd146102e7578063d204c45e14610317578063e985e9c514610333578063f2fde38b1461036357610116565b8063715018a6146102695780638da5cb5b1461027357806395d89b4114610291578063a22cb465146102af57610116565b806323b872dd116100e957806323b872dd146101b557806342842e0e146101d157806342966c68146101ed5780636352211e1461020957806370a082311461023957610116565b806301ffc9a71461011b57806306fdde031461014b578063081812fc14610169578063095ea7b314610199575b600080fd5b610135600480360381019061013091906122ad565b61037f565b604051610142919061271c565b60405180910390f35b610153610461565b6040516101609190612737565b60405180910390f35b610183600480360381019061017e91906122ff565b6104f3565b60405161019091906126b5565b60405180910390f35b6101b360048036038101906101ae9190612271565b610578565b005b6101cf60048036038101906101ca9190612117565b610690565b005b6101eb60048036038101906101e69190612117565b6106f0565b005b610207600480360381019061020291906122ff565b610710565b005b610223600480360381019061021e91906122ff565b61076c565b60405161023091906126b5565b60405180910390f35b610253600480360381019061024e91906120b2565b61081e565b60405161026091906129b9565b60405180910390f35b6102716108d6565b005b61027b61095e565b60405161028891906126b5565b60405180910390f35b610299610988565b6040516102a69190612737565b60405180910390f35b6102c960048036038101906102c491906121e1565b610a1a565b005b6102e560048036038101906102e09190612166565b610a30565b005b61030160048036038101906102fc91906122ff565b610a92565b60405161030e9190612737565b60405180910390f35b610331600480360381019061032c919061221d565b610aa4565b005b61034d600480360381019061034891906120db565b610b51565b60405161035a919061271c565b60405180910390f35b61037d600480360381019061037891906120b2565b610be5565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061044a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061045a575061045982610cdd565b5b9050919050565b60606000805461047090612c0f565b80601f016020809104026020016040519081016040528092919081815260200182805461049c90612c0f565b80156104e95780601f106104be576101008083540402835291602001916104e9565b820191906000526020600020905b8154815290600101906020018083116104cc57829003601f168201915b5050505050905090565b60006104fe82610d47565b61053d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610534906128f9565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105838261076c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105eb90612959565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610613610db3565b73ffffffffffffffffffffffffffffffffffffffff16148061064257506106418161063c610db3565b610b51565b5b610681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067890612839565b60405180910390fd5b61068b8383610dbb565b505050565b6106a161069b610db3565b82610e74565b6106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790612979565b60405180910390fd5b6106eb838383610f52565b505050565b61070b83838360405180602001604052806000815250610a30565b505050565b61072161071b610db3565b82610e74565b610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075790612999565b60405180910390fd5b610769816111b9565b50565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080c90612879565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088690612859565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108de610db3565b73ffffffffffffffffffffffffffffffffffffffff166108fc61095e565b73ffffffffffffffffffffffffffffffffffffffff1614610952576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094990612919565b60405180910390fd5b61095c60006111c5565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461099790612c0f565b80601f01602080910402602001604051908101604052809291908181526020018280546109c390612c0f565b8015610a105780601f106109e557610100808354040283529160200191610a10565b820191906000526020600020905b8154815290600101906020018083116109f357829003601f168201915b5050505050905090565b610a2c610a25610db3565b838361128b565b5050565b610a41610a3b610db3565b83610e74565b610a80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7790612979565b60405180910390fd5b610a8c848484846113f8565b50505050565b6060610a9d82611454565b9050919050565b610aac610db3565b73ffffffffffffffffffffffffffffffffffffffff16610aca61095e565b73ffffffffffffffffffffffffffffffffffffffff1614610b20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1790612919565b60405180910390fd5b6000610b2c60086115a6565b9050610b3860086115b4565b610b4283826115ca565b610b4c81836115e8565b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610bed610db3565b73ffffffffffffffffffffffffffffffffffffffff16610c0b61095e565b73ffffffffffffffffffffffffffffffffffffffff1614610c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5890612919565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc890612779565b60405180910390fd5b610cda816111c5565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610e2e8361076c565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610e7f82610d47565b610ebe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb590612819565b60405180910390fd5b6000610ec98361076c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610f0b5750610f0a8185610b51565b5b80610f4957508373ffffffffffffffffffffffffffffffffffffffff16610f31846104f3565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610f728261076c565b73ffffffffffffffffffffffffffffffffffffffff1614610fc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbf90612799565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102f906127d9565b60405180910390fd5b61104383838361165c565b61104e600082610dbb565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461109e9190612b25565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110f59190612a9e565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111b48383836116c7565b505050565b6111c2816116cc565b50565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156112fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f1906127f9565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113eb919061271c565b60405180910390a3505050565b611403848484610f52565b61140f8484848461171f565b61144e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144590612759565b60405180910390fd5b50505050565b606061145f82610d47565b61149e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611495906128d9565b60405180910390fd5b60006006600084815260200190815260200160002080546114be90612c0f565b80601f01602080910402602001604051908101604052809291908181526020018280546114ea90612c0f565b80156115375780601f1061150c57610100808354040283529160200191611537565b820191906000526020600020905b81548152906001019060200180831161151a57829003601f168201915b5050505050905060006115486118b6565b905060008151141561155e5781925050506115a1565b60008251111561159357808260405160200161157b929190612691565b604051602081830303815290604052925050506115a1565b61159c846118cd565b925050505b919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6115e4828260405180602001604052806000815250611974565b5050565b6115f182610d47565b611630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162790612899565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611657929190611e96565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146116c2576040517f5db570fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b505050565b6116d5816119cf565b60006006600083815260200190815260200160002080546116f590612c0f565b90501461171c5760066000828152602001908152602001600020600061171b9190611f1c565b5b50565b60006117408473ffffffffffffffffffffffffffffffffffffffff16611aec565b156118a9578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611769610db3565b8786866040518563ffffffff1660e01b815260040161178b94939291906126d0565b602060405180830381600087803b1580156117a557600080fd5b505af19250505080156117d657506040513d601f19601f820116820180604052508101906117d391906122d6565b60015b611859573d8060008114611806576040519150601f19603f3d011682016040523d82523d6000602084013e61180b565b606091505b50600081511415611851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184890612759565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506118ae565b600190505b949350505050565b606060405180602001604052806000815250905090565b60606118d882610d47565b611917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190e90612939565b60405180910390fd5b60006119216118b6565b90506000815111611941576040518060200160405280600081525061196c565b8061194b84611b0f565b60405160200161195c929190612691565b6040516020818303038152906040525b915050919050565b61197e8383611cbc565b61198b600084848461171f565b6119ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c190612759565b60405180910390fd5b505050565b60006119da8261076c565b90506119e88160008461165c565b6119f3600083610dbb565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a439190612b25565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ae8816000846116c7565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000821415611b57576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611cb7565b600082905060005b60008214611b89578080611b7290612c72565b915050600a82611b829190612af4565b9150611b5f565b60008167ffffffffffffffff811115611bcb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611bfd5781602001600182028036833780820191505090505b5090505b60008514611cb057600182611c169190612b25565b9150600a85611c259190612cbb565b6030611c319190612a9e565b60f81b818381518110611c6d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611ca99190612af4565b9450611c01565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d23906128b9565b60405180910390fd5b611d3581610d47565b15611d75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6c906127b9565b60405180910390fd5b611d816000838361165c565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611dd19190612a9e565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611e92600083836116c7565b5050565b828054611ea290612c0f565b90600052602060002090601f016020900481019282611ec45760008555611f0b565b82601f10611edd57805160ff1916838001178555611f0b565b82800160010185558215611f0b579182015b82811115611f0a578251825591602001919060010190611eef565b5b509050611f189190611f5c565b5090565b508054611f2890612c0f565b6000825580601f10611f3a5750611f59565b601f016020900490600052602060002090810190611f589190611f5c565b5b50565b5b80821115611f75576000816000905550600101611f5d565b5090565b6000611f8c611f87846129f9565b6129d4565b905082815260208101848484011115611fa457600080fd5b611faf848285612bcd565b509392505050565b6000611fca611fc584612a2a565b6129d4565b905082815260208101848484011115611fe257600080fd5b611fed848285612bcd565b509392505050565b600081359050612004816132fe565b92915050565b60008135905061201981613315565b92915050565b60008135905061202e8161332c565b92915050565b6000815190506120438161332c565b92915050565b600082601f83011261205a57600080fd5b813561206a848260208601611f79565b91505092915050565b600082601f83011261208457600080fd5b8135612094848260208601611fb7565b91505092915050565b6000813590506120ac81613343565b92915050565b6000602082840312156120c457600080fd5b60006120d284828501611ff5565b91505092915050565b600080604083850312156120ee57600080fd5b60006120fc85828601611ff5565b925050602061210d85828601611ff5565b9150509250929050565b60008060006060848603121561212c57600080fd5b600061213a86828701611ff5565b935050602061214b86828701611ff5565b925050604061215c8682870161209d565b9150509250925092565b6000806000806080858703121561217c57600080fd5b600061218a87828801611ff5565b945050602061219b87828801611ff5565b93505060406121ac8782880161209d565b925050606085013567ffffffffffffffff8111156121c957600080fd5b6121d587828801612049565b91505092959194509250565b600080604083850312156121f457600080fd5b600061220285828601611ff5565b92505060206122138582860161200a565b9150509250929050565b6000806040838503121561223057600080fd5b600061223e85828601611ff5565b925050602083013567ffffffffffffffff81111561225b57600080fd5b61226785828601612073565b9150509250929050565b6000806040838503121561228457600080fd5b600061229285828601611ff5565b92505060206122a38582860161209d565b9150509250929050565b6000602082840312156122bf57600080fd5b60006122cd8482850161201f565b91505092915050565b6000602082840312156122e857600080fd5b60006122f684828501612034565b91505092915050565b60006020828403121561231157600080fd5b600061231f8482850161209d565b91505092915050565b61233181612b59565b82525050565b61234081612b6b565b82525050565b600061235182612a5b565b61235b8185612a71565b935061236b818560208601612bdc565b61237481612da8565b840191505092915050565b600061238a82612a66565b6123948185612a82565b93506123a4818560208601612bdc565b6123ad81612da8565b840191505092915050565b60006123c382612a66565b6123cd8185612a93565b93506123dd818560208601612bdc565b80840191505092915050565b60006123f6603283612a82565b915061240182612db9565b604082019050919050565b6000612419602683612a82565b915061242482612e08565b604082019050919050565b600061243c602583612a82565b915061244782612e57565b604082019050919050565b600061245f601c83612a82565b915061246a82612ea6565b602082019050919050565b6000612482602483612a82565b915061248d82612ecf565b604082019050919050565b60006124a5601983612a82565b91506124b082612f1e565b602082019050919050565b60006124c8602c83612a82565b91506124d382612f47565b604082019050919050565b60006124eb603883612a82565b91506124f682612f96565b604082019050919050565b600061250e602a83612a82565b915061251982612fe5565b604082019050919050565b6000612531602983612a82565b915061253c82613034565b604082019050919050565b6000612554602e83612a82565b915061255f82613083565b604082019050919050565b6000612577602083612a82565b9150612582826130d2565b602082019050919050565b600061259a603183612a82565b91506125a5826130fb565b604082019050919050565b60006125bd602c83612a82565b91506125c88261314a565b604082019050919050565b60006125e0602083612a82565b91506125eb82613199565b602082019050919050565b6000612603602f83612a82565b915061260e826131c2565b604082019050919050565b6000612626602183612a82565b915061263182613211565b604082019050919050565b6000612649603183612a82565b915061265482613260565b604082019050919050565b600061266c603083612a82565b9150612677826132af565b604082019050919050565b61268b81612bc3565b82525050565b600061269d82856123b8565b91506126a982846123b8565b91508190509392505050565b60006020820190506126ca6000830184612328565b92915050565b60006080820190506126e56000830187612328565b6126f26020830186612328565b6126ff6040830185612682565b81810360608301526127118184612346565b905095945050505050565b60006020820190506127316000830184612337565b92915050565b60006020820190508181036000830152612751818461237f565b905092915050565b60006020820190508181036000830152612772816123e9565b9050919050565b600060208201905081810360008301526127928161240c565b9050919050565b600060208201905081810360008301526127b28161242f565b9050919050565b600060208201905081810360008301526127d281612452565b9050919050565b600060208201905081810360008301526127f281612475565b9050919050565b6000602082019050818103600083015261281281612498565b9050919050565b60006020820190508181036000830152612832816124bb565b9050919050565b60006020820190508181036000830152612852816124de565b9050919050565b6000602082019050818103600083015261287281612501565b9050919050565b6000602082019050818103600083015261289281612524565b9050919050565b600060208201905081810360008301526128b281612547565b9050919050565b600060208201905081810360008301526128d28161256a565b9050919050565b600060208201905081810360008301526128f28161258d565b9050919050565b60006020820190508181036000830152612912816125b0565b9050919050565b60006020820190508181036000830152612932816125d3565b9050919050565b60006020820190508181036000830152612952816125f6565b9050919050565b6000602082019050818103600083015261297281612619565b9050919050565b600060208201905081810360008301526129928161263c565b9050919050565b600060208201905081810360008301526129b28161265f565b9050919050565b60006020820190506129ce6000830184612682565b92915050565b60006129de6129ef565b90506129ea8282612c41565b919050565b6000604051905090565b600067ffffffffffffffff821115612a1457612a13612d79565b5b612a1d82612da8565b9050602081019050919050565b600067ffffffffffffffff821115612a4557612a44612d79565b5b612a4e82612da8565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612aa982612bc3565b9150612ab483612bc3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612ae957612ae8612cec565b5b828201905092915050565b6000612aff82612bc3565b9150612b0a83612bc3565b925082612b1a57612b19612d1b565b5b828204905092915050565b6000612b3082612bc3565b9150612b3b83612bc3565b925082821015612b4e57612b4d612cec565b5b828203905092915050565b6000612b6482612ba3565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612bfa578082015181840152602081019050612bdf565b83811115612c09576000848401525b50505050565b60006002820490506001821680612c2757607f821691505b60208210811415612c3b57612c3a612d4a565b5b50919050565b612c4a82612da8565b810181811067ffffffffffffffff82111715612c6957612c68612d79565b5b80604052505050565b6000612c7d82612bc3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612cb057612caf612cec565b5b600182019050919050565b6000612cc682612bc3565b9150612cd183612bc3565b925082612ce157612ce0612d1b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000602082015250565b61330781612b59565b811461331257600080fd5b50565b61331e81612b6b565b811461332957600080fd5b50565b61333581612b77565b811461334057600080fd5b50565b61334c81612bc3565b811461335757600080fd5b5056fea2646970667358221220b7f14a0548cd100c5b1b7e7fcab5969012c96a9eca730bb33c5eb45873a6e8e664736f6c63430008040033a2646970667358221220b29b441e96ee5e5f86c27f1ed035c96ce6c354ee0eb679c1ef45e10e5ff9a95464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_worldId": "The WorldID instance that will verify the proofs"
        }
      }
    },
    "stateVariables": {
      "groupId": {
        "details": "The WorldID group ID (1)"
      },
      "nullifierHashes": {
        "details": "Whether a nullifier hash has been used already. Used to prevent double-signaling"
      },
      "worldId": {
        "details": "The WorldID instance that will be used for verifying proofs"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2032,
        "contract": "contracts/Guild.sol:Guild",
        "label": "guildCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2037,
        "contract": "contracts/Guild.sol:Guild",
        "label": "guilds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(GuildDetails)2030_storage)"
      },
      {
        "astId": 2041,
        "contract": "contracts/Guild.sol:Guild",
        "label": "guildToRewardsLeft",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2045,
        "contract": "contracts/Guild.sol:Guild",
        "label": "guildIdToNFTAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2058,
        "contract": "contracts/Guild.sol:Guild",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(GuildDetails)2030_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Guild.GuildDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(GuildDetails)2030_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(GuildDetails)2030_storage": {
        "encoding": "inplace",
        "label": "struct Guild.GuildDetails",
        "members": [
          {
            "astId": 2019,
            "contract": "contracts/Guild.sol:Guild",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2021,
            "contract": "contracts/Guild.sol:Guild",
            "label": "uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2023,
            "contract": "contracts/Guild.sol:Guild",
            "label": "oracleContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2025,
            "contract": "contracts/Guild.sol:Guild",
            "label": "rewardToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2027,
            "contract": "contracts/Guild.sol:Guild",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2029,
            "contract": "contracts/Guild.sol:Guild",
            "label": "totalRewardAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}